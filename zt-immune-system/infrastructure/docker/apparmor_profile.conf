# /infrastructure/docker/apparmor_profile.conf
# Placeholder AppArmor profile for ZT Immune System Agent containers.
# AppArmor profiles are used to confine programs to a limited set of resources.
# Syntax: https://gitlab.com/apparmor/apparmor/wikis/AppArmor_Core_Policy_Reference

# This is a VERY basic profile. Real AppArmor profiles require careful construction
# based on the application's behavior, often starting in complain mode to learn accesses.

# You can include common abstractions provided by AppArmor
#include <tunables/global>

# Profile name - often corresponds to the path of the executable,
# or a custom name if loaded with `docker run --security-opt apparmor=<profile_name>`
# For a generic base, this might be named something like 'zt-agent-base-profile'
# and then specific agents could have their own profiles that might include this.
profile zt_agent_base_profile /opt/zt_agent/agent_src/main.py { # Assuming this is the entrypoint

  # --- Include other useful abstractions ---
  #include <abstractions/base>         # Basic POSIX capabilities
  #include <abstractions/python>       # If it's a Python application
  #include <abstractions/nameservice>  # For DNS lookups
  #include <abstractions/ssl_certs>    # For accessing SSL certificates

  # --- Deny dangerous capabilities by default ---
  # AppArmor works on a whitelist basis for many things once a profile is active.
  # However, explicitly denying certain capabilities can be an added layer.
  capability dac_override,          # Deny overriding file DAC permissions
  capability dac_read_search,
  capability sys_admin,            # Deny system administration operations
  capability sys_ptrace,           # Deny ptrace (debugging other processes)
  capability sys_boot,
  capability sys_module,           # Deny loading kernel modules
  capability net_admin,            # Deny network administration
  capability setuid,
  capability setgid;

  # --- File Access Rules ---
  # Allow read access to necessary libraries and binaries
  /lib/** r,
  /usr/lib/** r,
  /bin/** mr, # m for execute, r for read
  /usr/bin/** mr,
  /sbin/** mr,
  /usr/sbin/** mr,

  # Allow read access to Python installation (if using Python base image)
  /usr/local/lib/python3.9/** r,
  /usr/local/bin/python3.9 ix, # ix for execute if not linking to /usr/bin/python

  # Application home directory
  /opt/zt_agent/ r,                         # Read base directory
  /opt/zt_agent/** r,                       # Read all files under app_home
  /opt/zt_agent/agent_src/main.py ix,       # Execute the main script

  # Allow writing to specific log/tmp directories if needed by the agent
  # /opt/zt_agent/logs/ w,
  # /opt/zt_agent/logs/** w,
  # /opt/zt_agent/tmp/ w,
  # /opt/zt_agent/tmp/** w,

  # Deny write access to most of the filesystem by default (if not covered by includes)
  # deny /etc/** w,
  # deny /home/** w,

  # --- Network Rules ---
  # By default, networking might be allowed by base abstractions.
  # You can restrict it if needed.
  # Example: Allow TCP outbound connections (for Kafka, APIs, etc.)
  # network inet tcp,
  # network inet udp, # For DNS
  # network inet icmp,

  # Deny specific network operations if necessary
  # deny network raw,
  # deny network packet,

  # --- Deny execution from world-writable directories (common hardening) ---
  # deny /**/tmp/** mrwklx, # Deny execution from /tmp and subdirs
  # deny /var/tmp/** mrwklx,

  # --- Specific rules for an agent ---
  # Example: If an agent needs to read specific proc files
  # /proc/cpuinfo r,
  # /proc/meminfo r,
  # /proc/[0-9]*/stat r, # Read stat for processes

  # --- Child profiles (if the agent spawns other known executables) ---
  # profile /opt/zt_agent/helper_script.sh {
  #   #include <abstractions/base>
  #   /opt/zt_agent/helper_script.sh ix,
  #   # other rules for the helper script
  # }


  # --- Final Deny Rule (Optional but good for debugging) ---
  # This can help identify missing rules when the profile is in enforce mode.
  # It logs denied actions.
  # deny @{PROC}/* w, # Deny writing to /proc
  # deny @{HOME}/.* w, # Deny writing to dotfiles in home (if a home dir is used)


  # Note:
  # - 'r' (read), 'w' (write), 'm' (memory map executable), 'l' (link), 'k' (lock), 'ix' (execute inheriting environment)
  # - This profile is a starting point. It needs to be tested and refined.
  # - Use `aa-genprof /path/to/your/app` and `aa-logprof` in development/testing
  #   to help generate and refine profiles based on observed application behavior.
  # - Start in complain mode (`sudo aa-complain /path/to/executable_or_profile_name`)
  #   then switch to enforce mode (`sudo aa-enforce ...`) once the profile is stable.
  # - The profile name used with Docker (`docker run --security-opt apparmor=PROFILE_NAME`)
  #   must match a profile loaded into the AppArmor kernel module on the Docker host.
}
