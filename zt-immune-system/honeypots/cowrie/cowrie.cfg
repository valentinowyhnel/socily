# Cowrie Honeypot Configuration File

[cowrie]
# Hostname for the honeypot. Used in log messages and some interactions.
hostname = svr04

# Default listen addresses and ports.
# These are typically overridden by command line or Docker port mapping in production.
# The Dockerfile exposes 2222 and 2223.
# The actual binding in the container will use these specific ports.
listen_endpoints = tcp:2222:interface=0.0.0.0, tcp:2223:interface=0.0.0.0

# Path to the data directory. Cowrie stores its downloads, session logs (TTYs), etc. here.
# This path is relative to the Cowrie root directory (/home/cowrie/cowrie).
data_path = var/lib/cowrie

# Path to the text log files directory.
# This is also relative to the Cowrie root.
# Disabled by default in this config in favor of JSON to stdout.
log_path = var/log/cowrie

# Download path for malware/files collected by the honeypot.
download_path = ${data_path}/downloads

# Filesystem content path.
# This points to the fake filesystem provided to attackers.
filesystem_file = share/cowrie/fs.pickle

# SSH specific configuration
[ssh]
# Listen on port 2222 for SSH connections.
# The Dockerfile should expose this port.
listen_endpoints = tcp:2222:interface=0.0.0.0

# Enable/disable SSH support.
enabled = true

# SSH version string presented to clients.
version_string = SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.10

# Telnet specific configuration
[telnet]
# Listen on port 2223 for Telnet connections.
# The Dockerfile should expose this port.
listen_endpoints = tcp:2223:interface=0.0.0.0

# Enable/disable Telnet support.
enabled = true


# Output plugin configurations
# -----------------------------

# JSON logging output plugin
[output_jsonlog]
# Enable logging Cowrie events in JSON format.
enabled = true
# Log to stdout for easy capture by Docker log collectors.
logfile = stdout
# If you wanted to log to a file instead:
# logfile = ${log_path}/cowrie.json

# Text logging output plugin
[output_textlog]
# Disable standard text logging to avoid redundancy if JSON is sent to stdout.
# If jsonlog is to a file, you might want to enable this for human-readable logs.
enabled = false
# Default logfile if enabled:
# logfile = ${log_path}/cowrie.log
# format = default

# Other output plugins can be configured here (e.g., hpfeeds, splunk, elasticsearch)
# [output_hpfeeds]
# enabled = false
# server = hpfeeds.example.com
# port = 10000
# identifier = xxxxxxxx
# secret = yyyyyyyy
# channel_logfile = cowrie.sessions
# channel_alerts = cowrie.alerts

# [output_elasticsearch]
# enabled = false
# host = localhost
# port = 9200
# index_prefix = cowrie
# username = elastic
# password = changeme

# Input plugin configurations (e.g., command processing, proxying)
# -----------------------------------------------------------------
[input_telnet]
# Max login attempts for Telnet.
max_login_attempts = 3

[input_ssh]
# Max login attempts for SSH.
max_login_attempts = 3

# SFTP support (part of SSH)
[sftp]
enabled = true
# Max files that can be uploaded via SFTP per session.
max_files = 10
# Max size for a single uploaded file (in bytes).
max_file_size = 10485760 # 10MB

# Shell interaction
[shell]
# Default shell prompt.
prompt = # # This is for root-like shells, adjust if mimicking a non-root user by default
# prompt = $ # For non-root users

# Default environment variables for the shell.
# These can be customized to mimic specific systems.
env_vars = PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,LANG=en_US.UTF-8

# Misc settings
# -------------
# Enable capturing of TTY logs (session recordings).
[ttylog]
enabled = true
# Path for TTY logs, relative to data_path.
log_path = tty

# Proxy settings (if Cowrie needs to connect out via a proxy)
# [proxy]
# http_url = http://proxy.example.com:8080
# https_url = https://proxy.example.com:8080
